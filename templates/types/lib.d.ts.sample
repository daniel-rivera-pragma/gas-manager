declare namespace Lib {
  declare namespace DependencyManager {
    type ClassDef = new (...args: *[]) => *
  }

  interface DependencyManager {
    register<T extends DependencyManager.ClassDef>(
      classDef: T,
      factory: () => InstanceType<T>
    ): void
    resolve<T extends DependencyManager.ClassDef>(classDef: T): InstanceType<T>
  }
}

declare class DependencyManager implements Lib.DependencyManager {
  constructor()
  register<T extends Lib.DependencyManager.ClassDef>(
    classDef: T,
    factory: () => InstanceType<T>
  ): void
  resolve<T extends Lib.DependencyManager.ClassDef>(
    classDef: T
  ): InstanceType<T>
}
