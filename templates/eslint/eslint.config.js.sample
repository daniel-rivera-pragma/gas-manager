import fs from 'fs'
import path from 'path'
import { pathToFileURL } from 'url'

import js from '@eslint/js'
import jsdoc from 'eslint-plugin-jsdoc'
import prettierPlugin from 'eslint-plugin-prettier'
import gasPlugin from 'eslint-plugin-googleappsscript'
import jestPlugin from 'eslint-plugin-jest'
import globals from 'globals'

const IGNORE_PATHS = ['node_modules/', 'coverage/', '.vscode/', '.gemini/']
const RESOLVED_IGNORE_PATHS = IGNORE_PATHS.map((ignorePath) =>
  path.resolve(ignorePath.replace(/\/$/, ''))
)
const GAS_GLOBALS = ['doGet']

/**
 * @param {string} baseDir
 * @returns {string[]}
 */
function findGlobalsFiles(baseDir) {
  /** @type {string[]} */
  let files = []
  if (RESOLVED_IGNORE_PATHS.includes(baseDir)) {
    return files
  }
  const entries = fs.readdirSync(baseDir, { withFileTypes: true })
  for (const entry of entries) {
    const fullPath = path.join(baseDir, entry.name)
    if (entry.isDirectory()) {
      files = files.concat(findGlobalsFiles(fullPath))
    } else if (entry.name === 'eslint.globals.js') {
      files.push(fullPath)
    }
  }
  return files
}

async function buildGlobals() {
  const globalsFiles = findGlobalsFiles(path.resolve('.'))
  /** @type {string[]} */
  let allGlobalsArray = GAS_GLOBALS
  for (const globalsFile of globalsFiles) {
    const globalsUrl = pathToFileURL(globalsFile).href
    const { default: globalsArray } = await import(globalsUrl)
    if (Array.isArray(globalsArray)) {
      allGlobalsArray = allGlobalsArray.concat(globalsArray)
    }
  }
  const allGlobals = [...new Set([...allGlobalsArray])]
  /** @type {import('eslint').Linter.Globals} */
  const linterGlobals = {}
  for (const globalName of allGlobals) {
    linterGlobals[globalName] = 'readonly'
  }
  const globalsPattern =
    allGlobals.length > 0 ? `^(${allGlobals.join('|')})$` : ''
  return { linterGlobals, globalsPattern }
}

/**
 * @returns {Promise<import('eslint').Linter.Config[]>}
 */
async function buildConfig() {
  const { linterGlobals, globalsPattern } = await buildGlobals()
  const prettierConfigs = prettierPlugin.configs ?? {
    recommended: { rules: {} },
  }
  let prettierRules = {}
  if (Array.isArray(prettierConfigs.recommended)) {
    for (const element of prettierConfigs.recommended) {
      prettierRules = { ...prettierRules, ...element }
    }
  } else {
    prettierRules = { ...prettierRules, ...prettierConfigs.recommended.rules }
  }
  return [
    {
      ignores: IGNORE_PATHS,
    },
    {
      files: ['**/*.{js,ts}'],
      plugins: {
        jsdoc: jsdoc,
        prettier: prettierPlugin,
      },
      languageOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        globals: {
          ...globals.browser,
          ...globals.node,
          ...gasPlugin.environments.googleappsscript.globals,
          ...linterGlobals,
        },
      },
      rules: {
        ...js.configs.recommended.rules,
        ...jsdoc.configs['flat/recommended-typescript-flavor'].rules,
        ...prettierRules,
        'jsdoc/require-jsdoc': 'off',
        'jsdoc/require-param-description': 'off',
        'jsdoc/require-returns-description': 'off',
        'no-unused-vars': [
          'error',
          {
            varsIgnorePattern: globalsPattern,
          },
        ],
      },
    },
    {
      files: ['**/*.test.js'],
      plugins: {
        jest: jestPlugin,
      },
      languageOptions: {
        globals: {
          ...jestPlugin.environments.globals.globals,
        },
      },
      rules: {
        ...jestPlugin.configs['flat/recommended'].rules,
      },
    },
  ]
}

export default buildConfig()
